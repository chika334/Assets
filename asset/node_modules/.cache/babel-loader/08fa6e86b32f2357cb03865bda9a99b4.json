{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = configureStore;\n\nvar _redux = require('redux');\n\nvar _lodash = require('lodash.isplainobject');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar isFunction = function isFunction(arg) {\n  return typeof arg === 'function';\n};\n\nfunction configureStore() {\n  var middlewares = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return function mockStore() {\n    var _getState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    function mockStoreWithoutMiddleware() {\n      var actions = [];\n      var listeners = [];\n      var self = {\n        getState: function getState() {\n          return isFunction(_getState) ? _getState(actions) : _getState;\n        },\n        getActions: function getActions() {\n          return actions;\n        },\n        dispatch: function dispatch(action) {\n          if (!(0, _lodash2.default)(action)) {\n            throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n          }\n\n          if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant? ' + 'Action: ' + JSON.stringify(action));\n          }\n\n          actions.push(action);\n\n          for (var i = 0; i < listeners.length; i++) {\n            listeners[i]();\n          }\n\n          return action;\n        },\n        clearActions: function clearActions() {\n          actions = [];\n        },\n        subscribe: function subscribe(cb) {\n          if (isFunction(cb)) {\n            listeners.push(cb);\n          }\n\n          return function () {\n            var index = listeners.indexOf(cb);\n\n            if (index < 0) {\n              return;\n            }\n\n            listeners.splice(index, 1);\n          };\n        },\n        replaceReducer: function replaceReducer(nextReducer) {\n          if (!isFunction(nextReducer)) {\n            throw new Error('Expected the nextReducer to be a function.');\n          }\n        }\n      };\n      return self;\n    }\n\n    var mockStoreWithMiddleware = _redux.applyMiddleware.apply(undefined, _toConsumableArray(middlewares))(mockStoreWithoutMiddleware);\n\n    return mockStoreWithMiddleware();\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
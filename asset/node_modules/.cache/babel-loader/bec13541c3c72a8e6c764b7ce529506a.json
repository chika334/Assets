{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_FAIL, LOGOUT_SUCCESS } from '../actions/types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADED\n  });\n  axios.get('/api/users/auth', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  firstname,\n  lastname,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localStorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/freshaluck/Downloads/new/askgo/assets/asset/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_FAIL","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","firstname","lastname","email","password","config","headers","body","JSON","stringify","post","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACEC,WADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,gBALF,EAMEC,aANF,EAOEC,UAPF,EAQEC,cARF,QASO,kBATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AAEAF,EAAAA,KAAK,CAACc,GAAN,CAAU,iBAAV,EAA6BC,WAAW,CAACH,QAAD,CAAxC,EACGI,IADH,CACQC,GAAG,IAAIN,QAAQ,CAAC;AACpBE,IAAAA,IAAI,EAAEX,WADc;AAEpBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFO,GAAD,CADvB,EAKGC,KALH,CAKSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD,GAVH;AAWD,CAfM,C,CAiBP;;AACA,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CAAD,KAA8CjB,QAAQ,IAAI;AAChF;AACA,QAAMkB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFgF,CAQhF;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA;AAA9B,GAAf,CAAb;AAEA5B,EAAAA,KAAK,CAACkC,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,EACGb,IADH,CACQC,GAAG,IAAIN,QAAQ,CAAC;AACpBE,IAAAA,IAAI,EAAEP,gBADc;AAEpBY,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFO,GAAD,CADvB,EAKGC,KALH,CAKSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGD,GAVH;AAWD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMQ,WAAW,GAAGH,QAAQ,IAAI;AACrC;AACA,QAAMuB,KAAK,GAAGvB,QAAQ,GAAGwB,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AACA,QAAMN,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALqC,CAWrC;;AACA,MAAIK,KAAJ,EAAW;AACTN,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCK,KAAjC;AACD;;AAED,SAAON,MAAP;AACD,CAjBM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions'\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS\n} from '../actions/types';\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADED });\n\n  axios.get('/api/users/auth', tokenConfig(getState))\n    .then(res => dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status))\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n}\n\n// Register User\nexport const register = ({ firstname, lastname, email, password }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // Request body\n  const body = JSON.stringify({ firstname, lastname, email, password });\n\n  axios.post('/api/users', body, config)\n    .then(res => dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n}\n\n// setup config/headers and token\nexport const tokenConfig = getState => {\n  // Get token from localStorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }\n\n  // if token, add to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}"]},"metadata":{},"sourceType":"module"}
import { HSLColor } from '../color-types';
import { ThemeConfig, Theme, CustomPropertiesLike } from './types';
import colorAdjustmentsJson from './color-adjustments.json';
export declare function buildCustomProperties(themeConfig: ThemeConfig, globalTheming: boolean): CustomPropertiesLike;
export declare function buildThemeContext(themeConfig: ThemeConfig, cssCustomProperties?: CustomPropertiesLike): Theme;
export declare enum UNSTABLE_Color {
    Surface = "#FAFAFA",
    DarkSurface = "#111213",
    OnSurface = "#1F2225",
    Interactive = "#0870D9",
    Neutral = "#EAEAEB",
    Branded = "#008060",
    Critical = "#E32727",
    Warning = "#FFC453",
    Highlight = "#59D0C2",
    Success = "#008060"
}
declare type ColorRole = keyof typeof colorAdjustmentsJson;
declare type BaseColor = 'surface' | 'onSurface' | 'interactive' | 'neutral' | 'branded' | 'critical' | 'warning' | 'highlight' | 'success';
interface HslaAdjustment {
    hue?: number;
    saturation?: number;
    lightness?: number;
    alpha?: number;
}
export declare type ColorAdjustments = {
    [C in ColorRole]?: {
        baseColor: BaseColor;
        light: HslaAdjustment;
        dark: HslaAdjustment;
    };
};
export declare function buildColors(theme: ThemeConfig): {};
export declare function needsVariant(name: string): boolean;
export declare function setTextColor(name: string, variant?: 'light' | 'dark'): string[];
export declare function setTheme(color: string | HSLColor, baseName: string, key: string, variant: 'light' | 'dark'): string[][];
export {};
